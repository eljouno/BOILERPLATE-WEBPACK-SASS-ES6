// Hardware-accelerated scroll container
@mixin scroll-enhanced($direction: v, $advanced-optim: true, $children-optim: true, $force-scroll: false) {
  @if $direction == h {
	overflow-x: auto;
	overflow-y: hidden;
  } @else {
	overflow-x: hidden;
	overflow-y: auto;
  }

  -webkit-overflow-scrolling: touch;

  // avoid the iOS bug which allows content to always be scrollable
  @if $force-scroll != true {
	html.lock--scroll & {
	  -webkit-overflow-scrolling: auto;
	}
  }

  @if $advanced-optim == true {
	// hardware accelerated
	@include backface-visibility(hidden);
	will-change: transform;
  }

  @if $children-optim == true {
	> * {
	  @include transform(translateZ(0));
	  // @include backface-visibility(hidden);
	}
  }
}

@mixin device-ios {
  html.#{$class-ios} & {
	@content;
  }
}

@mixin device-android {
  html.#{$class-android} & {
	@content;
  }
}

@mixin device-apple {
  html[class^="#{$class-ios}"] &,
  html[class*=" #{$class-ios}"] &,
  html[class^="#{$class-safari}"] &,
  html[class*=" #{$class-safari}"] & {
	@content;
  }
}

// Fill up the entire space of the parent container
@mixin full-space($position: absolute, $overflow: hidden, $dimensions: false) {
  @if $position != null {
	position: $position;
  }

  top: 0;
  left: 0;

  @if $dimensions == true {
	height: 100%;
	width: 100%;
  } @else {
	right: 0;
	bottom: 0;
  }

  @if $overflow != null {
	overflow: $overflow;
  }
}


// Shorcut for background cover with background-image
@mixin cover-background($fallback: null, $contain: false) {
  @if $contain == true {
	background-size: contain;
  } @else {
	background-size: cover;
  }

  background-position: center center;
  background-repeat: no-repeat;

  @if $fallback {
	background-image: url($fallback);
  }
}


// Background type 'cover' with <img />, <video>...
// WARNING: forget about IE8, issues with iOS 7
@mixin cover-space($keep-compatibility: false, $ratio: h) {
  @if ($keep-compatibility == true) {
	position: absolute;
	width: auto;
	height: auto;
	min-width: 100%;
	min-height: 100%;
	@include center;

	@if $ratio == h {
	  max-width: none;
	  max-height: 100%;
	} @else if $ratio == v {
	  max-width: 100%;
	  max-height: none;
	}
  } @else {
	width: 100%;
	height: 100%;
	object-fit: cover; // WARNING: this one might break with transitions
  }
}


// Custom ellipsis
// Bourbon's one is adding 'display: inline-block;' which is often undesirable
// This one also allows for multiline ellipsis on webkit browsers
@mixin custom-ellipsis($line-clamp: 1, $italic: false, $italic-fontsize: 16px, $line-height: 1.2) {
  /*! autoprefixer: off */
  overflow: hidden;

  @if $line-clamp == 1 {
	text-overflow: ellipsis;
	white-space: nowrap;
	word-wrap: normal;
  } @else {
	display: -webkit-box;
	-webkit-line-clamp: $line-clamp;
	-webkit-box-orient: vertical;

	@if $italic == true {
	  $italic-delta: $line-clamp * 1px;
	  max-height: round($italic-fontsize * $line-clamp * $line-height - $italic-delta);
	}
  }
  /*! autoprefixer: on */
}


// Break words properly
@mixin break-word {
  // with the following one, the word will always break if it contains a hyphen
  -webkit-word-break: break-word;
  -webkit-word-wrap: break-word;
  word-break: break-word;
  word-wrap: break-word;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}


// Maintain a custom aspect ratio
// Src: https://css-tricks.com/snippets/sass/maintain-aspect-ratio-mixin/
// Another interesting solution: http://stackoverflow.com/a/20593342
@mixin aspect-ratio($ratio-or-width, $height: null, $use-float: false) {
  $padding: if($height,
	  percentage($height/$ratio-or-width),
	  percentage(1/$ratio-or-width)
  );

  @if use-float == true {
	&::before {
	  content: '';
	  float: left;
	  padding-bottom: $padding;
	}
	&::after {
	  content: '';
	  display: table;
	  clear: both;
	}
  } @else {
	&::before {
	  content: '';
	  display: block;
	  padding-top: $padding;
	}
  }
}


// Append a mask to the element
@mixin add-mask($url, $size: cover, $repeat: no-repeat, $position: center bottom) {
  -webkit-mask-image: $url;
  -webkit-mask-size: $size;
  -webkit-mask-repeat: $repeat;
  -webkit-mask-position: $position;
  mask-image: $url;
  mask-size: $size;
  mask-repeat: $repeat;
  mask-position: $position;
  mask: $url $repeat $position / $size;
}

// Center vertically and/or horizontally an absolute/relative positioned element
@mixin center($xy: xy, $position: absolute, $transform-3d: null) {
  @if $position {
	position: $position;
  }

  @if $xy == xy {
	left: 50%;
	top: 50%;
	bottom: auto;
	right: auto;

	@if $transform-3d == true {
	  transform: translate3d(-50%, -50%, 0);
	} @else {
	  transform: translateX(-50%) translateY(-50%);
	}
  } @else if $xy == x {
	left: 50%;
	right: auto;

	@if $transform-3d == true {
	  transform: translate3d(-50%, 0, 0);
	} @else {
	  transform: translateX(-50%);
	}
  } @else if $xy == y {
	top: 50%;
	bottom: auto;

	@if $transform-3d == true {
	  transform: translate3d(0, -50%, 0);
	} @else {
	  transform: translateY(-50%);
	}
  }
}


// Avoid breaking content when using column-count
// src: http://stackoverflow.com/a/26637893
@mixin column-avoid-breaking {
  // overflow: hidden;
  -webkit-column-break-inside: avoid;
  page-break-inside: avoid;
  -moz-column-break-inside: avoid;
  column-break-inside: avoid;
  break-inside: avoid;
  break-inside: avoid-column;
}


// Icon font smoothing
@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}


// Icon reset
@mixin icon-reset($font-family: null) {
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  text-decoration: inherit;

  @if $font-family != null {
	font-family: $font-family;
  }

  text-align: center;
  line-height: 1;

  @include font-smoothing;

  speak: none;
}


// Icon centered inside its parent container
@mixin icon-fullspace($font-family: null) {
  @include center;
  margin: 0;
  padding: 0;
  @include icon-reset($font-family);
}


// Responsive image
@mixin image-responsive($display: null, $width: 'width') {
  @if $display {
	display: $display;
  }

  @if ($width == 'height'){
	max-height: 100%;
	width: auto;
  }
  @else {
	max-width: 100%;
	height: auto;
  }
}

// Get rid of strange behaviors
@mixin webkit-no-touch-callout {
  -webkit-touch-callout: none;
}

// Src: http://stackoverflow.com/questions/5210481/disable-orange-outline-highlight-on-focus
@mixin webkit-no-tap-highlight {
  -webkit-tap-highlight-color: rgba(#000, 0);
  -webkit-tap-highlight-color: transparent;
  // outline: none;
}


@mixin text-size-adjust($value: 100%) {
  @include prefixer(text-size-adjust, $value, getRequiredPrefixes());
}


// Custom selection
@mixin custom-selection($background-color, $text-color: #fff) {
  // The 2 rule sets need to be kept separated
  &::-moz-selection {
	background-color: $background-color;
	color: $text-color;
	text-shadow: none;
  }

  &::selection,
  & ::selection {
	background-color: $background-color;
	color: $text-color;
	text-shadow: none;
  }
}

@mixin grid($template-cols:null) {
  @supports (display:grid) {
	display: grid;
	$grid-cols: ();

	@each $cols in $template-cols {
	  $grid-cols: append($grid-cols, #{$cols}fr);
	}

	grid-template-columns: #{$grid-cols};

	@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
	  -ms-grid-columns: #{$grid-cols};;
	}
  }
}

@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}


@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;
  $extmods: (
	  eot: "?",
	  svg: "#" + str-replace($name, " ", "_")
  );
  $formats: (
	  otf: "opentype",
	  ttf: "truetype"
  );
  @each $ext in $exts {
	$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
	$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
	$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }
  @font-face {
	font-family: quote($name);
	font-style: $style;
	font-weight: $weight;
	src: $src;
  }
}

/*
@include fontface('mafonttest', '../fonts/mafonttest-light', 300, normal);*/


@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
  @include pseudo($pos: $position);
  width: 0;
  height: 0;
  @if $round {
	border-radius: 3px;
  }
  @if $direction == down {
	border-left: $size solid transparent;
	border-right: $size solid transparent;
	border-top: $size solid $color;
	margin-top: 0 - round( $size / 2.5 );
  } @else if $direction == up {
	border-left: $size solid transparent;
	border-right: $size solid transparent;
	border-bottom: $size solid $color;
	margin-bottom: 0 - round( $size / 2.5 );
  } @else if $direction == right {
	border-top: $size solid transparent;
	border-bottom: $size solid transparent;
	border-left: $size solid $color;
	margin-right: -$size;
  } @else if  $direction == left {
	border-top: $size solid transparent;
	border-bottom: $size solid transparent;
	border-right: $size solid $color;
	margin-left: -$size;
  }
}


@mixin input-placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}
/*
ex: textarea {
  @include input-placeholder {
	color: $grey;
  }
}*/

// mixins
@mixin touch-hover($subselector: '') {
  .no-js #{$subselector} &:hover,
  .no-js #{$subselector} &:focus,
  .js.no-touch #{$subselector} &:hover,
  .js.no-touch #{$subselector} &:focus,
  .js.touch #{$subselector} &:active {
	@content;
  }
}

@mixin focus($subselector: '') {
  .no-js #{$subselector} &:focus,
  .js.no-touch #{$subselector} &:focus {
	@content;
  }
}

@mixin contrast($color) {
  *,
  *::before,
  *::after,
  *:not([class]),
  *:not([class])::before,
  *:not([class])::after {
	border-color: $color !important;
	background: transparent !important;
	box-shadow: none !important;
	color: $color !important;
	text-shadow: none !important;
  }
}

@mixin flex-center() {
  display: flex;
  justify-content: center;
  align-items: center;
}


@mixin visuallyhidden ($contain: false) {
  @if $contain == true {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
  }
  @else {
	border: inherit;
	clip: rect(0 0 0 0);
	height: inherit;
	margin: inherit;
	overflow: auto;
	padding: inherit;
	position: relative;
	width:inherit 1px;
  }
}

// center a block
@mixin push--auto {
  margin: {
	left: auto;
	right: auto;
  }
}

// Set basic variables:
// Borders :
@mixin border($var-direction: "border", $var-width: '', $var-color: '') {
  @if $var-direction == 'border'{
	border: $var-width solid $var-color;
  }
  @if $var-direction == 'border-bottom'{
	border-bottom: $var-width solid $var-color;
  }
  @if $var-direction == 'border-top'{
	border-top: $var-width solid $var-color;
  }
  @if $var-direction == 'border-right'{
	border-right: $var-width solid $var-color;
  }
  @if $var-direction == 'border-left'{
	border-left: $var-width solid $var-color;
  }
  @if $var-direction == 'border-tb'{
	border-bottom: $var-width solid $var-color;
	border-top:    $var-width solid $var-color;
  }
  @if $var-direction == 'border-lr'{
	border-left:  $var-width solid $var-color;
	border-right: $var-width solid $var-color;
  }
  @if $var-direction == 'border-no-top'{
	border:     $var-width solid $var-color;
	border-top: none;
  }
  @if $var-direction == 'border-no-bottom'{
	border:        $var-width solid $var-color;
	border-bottom: none;
  }
}


/*
  This mixin can be used to set the object-fit:
  @include object-fit(contain);
  or object-fit and object-position:
  @include object-fit(cover, top);
*/
@mixin object-fit($fit: fill, $position: null){
  -o-object-fit: $fit;
  object-fit: $fit;
  @if $position {
	-o-object-position: $position;
	object-position: $position;
	font-family: 'object-fit: #{$fit}; object-position: #{$position}';
  } @else {
	font-family: 'object-fit: #{$fit}';
  }
}

@mixin font-size($size) {
  font-size: $size; //Fallback in px
  font-size: calculateRem($size); // change ratio in function calculateRem (basically 16px)
}
