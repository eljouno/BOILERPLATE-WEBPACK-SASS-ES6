/* ===========
   FULL-SPACE
============== */
@mixin full-space($position: absolute, $overflow: hidden, $dimensions: false) {
  @if $position != null {
	position: $position;
  }

  top: 0;
  left: 0;

  @if $dimensions == true {
	height: 100%;
	width: 100%;
  } @else {
	right: 0;
	bottom: 0;
  }

  @if $overflow != null {
	overflow: $overflow;
  }
}

/* =================
   COVER BACKGROUND
==================== */
@mixin cover-background($fallback: null, $contain: false) {
  @if $contain == true {
	background-size: contain;
  } @else {
	background-size: cover;
  }

  background-position: center center;
  background-repeat: no-repeat;

  @if $fallback {
	background-image: url($fallback);
  }
}

/* ===========
   BREAK-WORD
============== */
@mixin break-word {
  -webkit-word-break: break-word;
  -webkit-word-wrap: break-word;
  word-break: break-word;
  word-wrap: break-word;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}


/* ===========
   CENTER
============== */
@mixin center($xy: xy, $position: absolute, $transform-3d: null) {
  @if $position {
	position: $position;
  }

  @if $xy == xy {
	left: 50%;
	top: 50%;
	bottom: auto;
	right: auto;

	@if $transform-3d == true {
	  transform: translate3d(-50%, -50%, 0);
	} @else {
	  transform: translateX(-50%) translateY(-50%);
	}
  } @else if $xy == x {
	left: 50%;
	right: auto;

	@if $transform-3d == true {
	  transform: translate3d(-50%, 0, 0);
	} @else {
	  transform: translateX(-50%);
	}
  } @else if $xy == y {
	top: 50%;
	bottom: auto;

	@if $transform-3d == true {
	  transform: translate3d(0, -50%, 0);
	} @else {
	  transform: translateY(-50%);
	}
  }
}


/* =================
   IMAGE-RESPONSIVE
==================== */
@mixin image-responsive($display: null, $width: 'width') {
  @if $display {
	  display: $display;
  }

  @if ($width == 'height'){
	  max-height: 100%;
	  width: auto;
  }
  @else {
	  max-width: 100%;
	  height: auto;
  }
}


/* ===========
   TRUNCATE
============== */
@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}


/* ===========
   FONT-FACE
============== */
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;
  $extmods: (
	  eot: "?",
	  svg: "#" + str-replace($name, " ", "_")
  );
  $formats: (
	  otf: "opentype",
	  ttf: "truetype"
  );
  @each $ext in $exts {
	$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
	$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
	$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }
  @font-face {
	font-family: quote($name);
	font-style: $style;
	font-weight: $weight;
	src: $src;
  }
}

/* ===========
   PLACEHOLDER
============== */
@mixin input-placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}


/* ===========
   CONTRAST
============== */
@mixin contrast($color) {
  *,
  *::before,
  *::after,
  *:not([class]),
  *:not([class])::before,
  *:not([class])::after {
	border-color: $color !important;
	background: transparent !important;
	box-shadow: none !important;
	color: $color !important;
	text-shadow: none !important;
  }
}


/* ================
   VISUALLY-HIDDEN
=================== */
@mixin visuallyhidden ($contain: false) {
  @if $contain == true {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
  }
  @else {
	border: inherit;
	clip: rect(0 0 0 0);
	height: inherit;
	margin: inherit;
	overflow: auto;
	padding: inherit;
	position: relative;
	width:inherit 1px;
  }
}

/* ===========
   BORDER
============== */
@mixin border($var-direction: "border", $var-width: '', $var-color: '') {
  @if $var-direction == 'border'{
	  border: $var-width solid $var-color;
  }
  @if $var-direction == 'border-bottom'{
	  border-bottom: $var-width solid $var-color;
  }
  @if $var-direction == 'border-top'{
	  border-top: $var-width solid $var-color;
  }
  @if $var-direction == 'border-right'{
	  border-right: $var-width solid $var-color;
  }
  @if $var-direction == 'border-left'{
	  border-left: $var-width solid $var-color;
  }
  @if $var-direction == 'border-tb'{
	  border-bottom: $var-width solid $var-color;
	  border-top:    $var-width solid $var-color;
  }
  @if $var-direction == 'border-lr'{
	  border-left:  $var-width solid $var-color;
	  border-right: $var-width solid $var-color;
  }
  @if $var-direction == 'border-no-top'{
	border:     $var-width solid $var-color;
	border-top: none;
  }
  @if $var-direction == 'border-no-bottom'{
	border:        $var-width solid $var-color;
	border-bottom: none;
  }
}

/* ===========
   OBJECT-FIT
============== */
/*
  This mixin can be used to set the object-fit:
  @include object-fit(contain);
  or object-fit and object-position:
  @include object-fit(cover, top);
*/
@mixin object-fit($fit: fill, $position: null){
  -o-object-fit: $fit;
  object-fit: $fit;
  @if $position {
	-o-object-position: $position;
	object-position: $position;
	font-family: 'object-fit: #{$fit}; object-position: #{$position}';
  } @else {
	font-family: 'object-fit: #{$fit}';
  }
}


/* =========
   FONT-SIZE
============ */
@mixin font-size($size) {
  font-size: $size; //Fallback in px
  font-size: calculateRem($size); // change ratio in function calculateRem (basically 16px)
}


/* =========
   ARROW
============ */
@mixin arrow($direction: down, $size: 5px, $color: #555) {
  width: 0;
  height: 0;
  @if ($direction == left) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
  }
  @else if ($direction == right) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  }
  @else if ($direction == down) {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  }
  @else {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  }
}